#!/usr/bin/env python3
"""
Test script for mock audit functionality
Tests the audit system with existing Solidity files
"""

import json
import sys
from pathlib import Path

def analyze_solidity_file(file_path):
    """Analyze a Solidity file and return mock audit results"""
    try:
        with open(file_path, 'r') as f:
            content = f.read()
        
        findings = []
        security_score = 85  # Base score
        
        # Simple pattern analysis
        if "pragma solidity" in content:
            findings.append({
                "severity": "INFO",
                "title": "Solidity Version Specified",
                "description": f"Contract specifies Solidity version"
            })
        
        if "onlyOwner" in content:
            findings.append({
                "severity": "GOOD",
                "title": "Access Control Implemented",
                "description": "Contract uses access control modifiers"
            })
            security_score += 5
        
        if "require(" in content:
            findings.append({
                "severity": "GOOD", 
                "title": "Input Validation Present",
                "description": "Contract validates inputs with require statements"
            })
            security_score += 3
        
        if "emit " in content:
            findings.append({
                "severity": "GOOD",
                "title": "Events Emitted",
                "description": "Contract emits events for transparency"
            })
            security_score += 2
        
        if "transfer(" in content.lower() or "send(" in content.lower():
            findings.append({
                "severity": "WARNING",
                "title": "External Calls Present",
                "description": "Contract makes external calls - ensure reentrancy protection"
            })
            security_score -= 5
        
        if "selfdestruct" in content.lower():
            findings.append({
                "severity": "CRITICAL",
                "title": "Self-Destruct Function",
                "description": "Contract can be destroyed - ensure proper access control"
            })
            security_score -= 10
        
        # Gas optimization suggestions
        gas_optimizations = [
            "Use ++i instead of i++ in loops for gas efficiency",
            "Consider using immutable for constants that don't change",
            "Pack structs efficiently to save storage slots"
        ]
        
        # Best practices
        best_practices = [
            "Add comprehensive NatSpec documentation",
            "Consider using OpenZeppelin libraries for common patterns",
            "Implement proper error handling with custom errors",
            "Add comprehensive unit tests"
        ]
        
        return {
            "contract_path": str(file_path),
            "security_score": min(100, max(0, security_score)),
            "findings": findings,
            "gas_optimization": gas_optimizations,
            "best_practices": best_practices,
            "lines_of_code": len(content.split('\n')),
            "functions_count": content.count('function '),
            "modifiers_count": content.count('modifier ')
        }
        
    except Exception as e:
        return {"error": f"Failed to analyze {file_path}: {str(e)}"}

def generate_report_text(results):
    """Generate a text report from audit results"""
    if "error" in results:
        return f"Error: {results['error']}"
    
    report = f"""
🔒 UATU AUDIT SECURITY REPORT
{'=' * 50}

📄 Contract: {Path(results['contract_path']).name}
📊 Security Score: {results['security_score']}/100
📏 Lines of Code: {results['lines_of_code']}
🔧 Functions: {results['functions_count']}
🛡️ Modifiers: {results['modifiers_count']}

🔍 SECURITY FINDINGS:
{'-' * 30}
"""
    
    for finding in results['findings']:
        severity_emoji = {
            'CRITICAL': '🚨',
            'WARNING': '⚠️',
            'INFO': 'ℹ️',
            'GOOD': '✅'
        }.get(finding['severity'], '•')
        
        report += f"""
{severity_emoji} {finding['severity']}: {finding['title']}
   {finding['description']}
"""
    
    report += f"""
⛽ GAS OPTIMIZATION RECOMMENDATIONS:
{'-' * 30}
"""
    for i, opt in enumerate(results['gas_optimization'], 1):
        report += f"{i}. {opt}\n"
    
    report += f"""
✨ BEST PRACTICES:
{'-' * 30}
"""
    for i, practice in enumerate(results['best_practices'], 1):
        report += f"{i}. {practice}\n"
    
    report += f"""
{'=' * 50}
Report generated by UatuAudit Platform
https://uatu.audit
"""
    
    return report

def main():
    """Main test function"""
    print("🔍 UatuAudit Mock Testing")
    print("=" * 40)
    
    # Find Solidity files
    sol_files = [
        "examples/sample.sol",
        "examples/sensitive.sol"
    ]
    
    for sol_file in sol_files:
        file_path = Path(sol_file)
        if not file_path.exists():
            print(f"❌ File not found: {sol_file}")
            continue
        
        print(f"\n🧪 Testing audit on: {file_path.name}")
        print("-" * 30)
        
        # Run analysis
        results = analyze_solidity_file(file_path)
        
        if "error" in results:
            print(f"❌ {results['error']}")
            continue
        
        # Generate and save report
        report = generate_report_text(results)
        
        # Save results
        output_dir = Path("test_outputs")
        output_dir.mkdir(exist_ok=True)
        
        # Save JSON results
        json_file = output_dir / f"{file_path.stem}_audit_results.json"
        with open(json_file, 'w') as f:
            json.dump(results, f, indent=2)
        
        # Save text report
        report_file = output_dir / f"{file_path.stem}_audit_report.txt"
        with open(report_file, 'w') as f:
            f.write(report)
        
        print(f"✅ Analysis complete!")
        print(f"📊 Security Score: {results['security_score']}/100")
        print(f"🔍 Findings: {len(results['findings'])}")
        print(f"💾 Results saved to: {json_file}")
        print(f"📄 Report saved to: {report_file}")
        
        # Show summary
        severity_counts = {}
        for finding in results['findings']:
            severity = finding['severity']
            severity_counts[severity] = severity_counts.get(severity, 0) + 1
        
        if severity_counts:
            print("📈 Findings breakdown:")
            for severity, count in severity_counts.items():
                emoji = {'CRITICAL': '🚨', 'WARNING': '⚠️', 'INFO': 'ℹ️', 'GOOD': '✅'}.get(severity, '•')
                print(f"   {emoji} {severity}: {count}")
    
    print(f"\n🎉 Mock testing completed!")
    print(f"📁 Check the test_outputs/ directory for detailed results")

if __name__ == "__main__":
    main()